# Uncomment this line to define a global platform for your project
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
    #xcode 16 비트코드 이슈 해결용
    require 'fileutils'
    bitcode_strip_path = `xcrun --find bitcode_strip`.chop!

       def  strip_bitcode_from_framework ( bitcode_strip_path, framework_relative_path )
          framework_path = File.join(Dir.pwd, framework_relative_path)
           temp_output_path = "#{framework_path}"  # 임시 경로로 파일을 스트립핑 -> 경로가 같아야함. 없어도 되는 코드

          command = " #{bitcode_strip_path}  #{framework_path} -r -o #{temp_output_path} "
           puts "비트코드 스트리핑: #{command} "
           system(command)
       end
   framework_paths = [
           "/Pods/naveridlogin-sdk-ios/NaverThirdPartyLogin.xcframework/ios-arm64_x86_64-simulator/NaverThirdPartyLogin.framework/NaverThirdPartyLogin",
           "/Pods/naveridlogin-sdk-ios/NaverThirdPartyLogin.xcframework/ios-arm64_x86_64-simulator/dSYMs/NaverThirdPartyLogin.framework.dSYM/Contents/Resources/DWARF/NaverThirdPartyLogin",
           "/Pods/naveridlogin-sdk-ios/NaverThirdPartyLogin.xcframework/ios-arm64/NaverThirdPartyLogin.framework/NaverThirdPartyLogin",
           "/Pods/naveridlogin-sdk-ios/NaverThirdPartyLogin.xcframework/ios-arm64/dSYMs/NaverThirdPartyLogin.framework.dSYM/Contents/Resources/DWARF/NaverThirdPartyLogin"
        ]
    framework_paths.each do | framework_relative_path |
         strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
   end


  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)

    target.build_configurations.each do |config|

      # You can remove unused permissions here
      # for more information: https://github.com/BaseflowIT/flutter-permission-handler/blob/master/permission_handler/ios/Classes/PermissionHandlerEnums.h
      # e.g. when you don't need camera permission, just add 'PERMISSION_CAMERA=0'
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
        '$(inherited)',
        ## dart: PermissionGroup.camera
        'PERMISSION_CAMERA=1',
        ## dart: PermissionGroup.photos
        'PERMISSION_PHOTOS=1',

        ## The 'PERMISSION_LOCATION' macro enables the `locationWhenInUse` and `locationAlways` permission. If
        ## the application only requires `locationWhenInUse`, only specify the `PERMISSION_LOCATION_WHENINUSE`
        ## macro.
        ##
        ## dart: [PermissionGroup.location, PermissionGroup.locationAlways, PermissionGroup.locationWhenInUse]
        'PERMISSION_LOCATION=1',
        'PERMISSION_LOCATION_WHENINUSE=1',

        ## dart: PermissionGroup.notification
        'PERMISSION_NOTIFICATIONS=1',
      ]

    end
  end
end
